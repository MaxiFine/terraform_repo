#############################
## NEW CONFIGS
##############################

name: "Terraform Setup and Format"
description: "Setup Terraform environment, create backend resources, and format code"

# inputs:
#   aws-region:
#     description: "AWS region for deployment"
#     required: true
#     default: "us-east-1"
#   aws-access-key-id:
#     description: "AWS Access Key ID"
#     required: true
#     # default: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   aws-secret-access-key:
#     description: "AWS Secret Access Key"
#     required: true
#     # default: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   tf-bucket-name:
#     description: "S3 bucket name for Terraform state"
#     required: true
#     # default: "aws-ecommerce-terraform"
#   tf-dynamodb-table:
#     description: "DynamoDB table name for Terraform lock"
#     required: true
#     # default: "terraform-state-lock"
#   working-directory:
#     description: "Working directory for Terraform commands"
#     required: true
#     default: "lab-work-2"

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      # with:
      #   aws-access-key-id: ${{ inputs.aws-access-key-id }}
      #   aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
      #   aws-region: ${{ inputs.aws-region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Create S3 Bucket for Terraform State
      shell: bash
      run: |
        if ! aws s3api head-bucket --bucket ${{ inputs.tf-bucket-name }} 2>/dev/null; then
          echo "Creating S3 bucket: ${{ inputs.tf-bucket-name }} in region: ${{ inputs.aws-region }}"
          if [ "${{ inputs.aws-region }}" == "us-east-1" ]; then
            aws s3api create-bucket --bucket ${{ inputs.tf-bucket-name }}
          else
            aws s3api create-bucket \
              --bucket ${{ inputs.tf-bucket-name }} \
              --region ${{ inputs.aws-region }} \
              --create-bucket-configuration LocationConstraint=${{ inputs.aws-region }}
          fi
          
          # Enable versioning for state file protection
          aws s3api put-bucket-versioning \
            --bucket ${{ inputs.tf-bucket-name }} \
            --versioning-configuration Status=Enabled
          
          echo "✅ S3 bucket created successfully"
        else
          echo "✅ S3 bucket ${{ inputs.tf-bucket-name }} already exists"
        fi

    # - name: Create DynamoDB Table for Terraform Lock
    #   shell: bash
    #   run: |
    #     if ! aws dynamodb describe-table --table-name ${{ inputs.tf-dynamodb-table }} >/dev/null 2>&1; then
    #       echo "Creating DynamoDB table: ${{ inputs.tf-dynamodb-table }}"
    #       aws dynamodb create-table \
    #         --table-name ${{ inputs.tf-dynamodb-table }} \
    #         --attribute-definitions AttributeName=LockID,AttributeType=S \
    #         --key-schema AttributeName=LockID,KeyType=HASH \
    #         --billing-mode PAY_PER_REQUEST \
    #         --region ${{ inputs.aws-region }}
          
    #       echo "Waiting for table to become active..."
    #       aws dynamodb wait table-exists --table-name ${{ inputs.tf-dynamodb-table }} --region ${{ inputs.aws-region }}
    #       echo "✅ DynamoDB table created successfully"
    #     else
    #       echo "✅ DynamoDB table ${{ inputs.tf-dynamodb-table }} already exists"
    #     fi

    - name: Create terraform.tfvars
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        cat > terraform.tfvars << EOF
        aws_region = "${{ inputs.aws-region }}"
        EOF
        echo "✅ terraform.tfvars created"

    - name: Terraform Auto-Format
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Auto-formatting Terraform code..."
        terraform fmt -recursive
        echo "✅ Terraform code formatted"

    - name: Terraform Format Check
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "📋 Checking Terraform format..."
        if ! terraform fmt -check -diff -recursive; then
          echo "❌ Terraform format check failed"
          echo "💡 Run 'terraform fmt -recursive' to fix formatting issues"
          exit 1
        fi
        echo "✅ Terraform format check passed"

#   another way to do this is to use the terraform-setup action
    # - name: Write backend.tfvars for backend configs
    #   run: | 
    #     echo "Writing backend.tfvars for Terraform backend configuration..."
    #     cat > backend.tfvars << EOF
    #     bucket = "${{ inputs.tf-bucket-name }}"
    #     key    = "terraform.tfstate"
    #     region = "${{ inputs.aws-region }}"
    #     encrypt = true
    #     dynamodb_table = "${{ inputs.tf-dynamodb-table }}"
    #     EOF
    #     echo "✅ backend.tfvars created"

    - name: Terraform Initialize
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚀 Initializing Terraform..."
        # terraform init -backend-config=backend.tfvars
        # echo "✅ Terraform initialized"
        terraform init \
          # -backend-config="bucket=${{ inputs.tf-bucket-name }}" \
          # -backend-config="key=terraform.tfstate" \
          # -backend-config="region=${{ inputs.aws-region }}" \
          # -backend-config="encrypt=true" \
          # -backend-config="dynamodb_table=${{ inputs.tf-dynamodb-table }}"
        echo "✅ Terraform initialized"

    - name: Terraform Validate
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔍 Validating Terraform configuration..."
        terraform validate
        echo "✅ Terraform validation passed"